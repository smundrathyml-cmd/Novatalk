{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild, ViewChildren } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms'; // NEW: for [(ngModel)]\nimport { SubscribeBarComponent } from '../cta/subscribe-bar.component';\nlet LandingComponent = class LandingComponent {\n  constructor(router) {\n    this.router = router;\n    this.Math = Math;\n    /** Messages used by the visible demo chat */\n    this.messages = [];\n    /** Auto-play script for the demo (used until the user types) */\n    this.steps = [{\n      text: \"Business User: I need last month’s sales and customer feedback.\",\n      from: 'user'\n    }, {\n      text: \"NovaTalk: Done. Total sales, top products, and key feedback trends summarized.\",\n      from: 'bot',\n      hint: \"Pulled sales + feedback, summarized patterns so you don’t scan raw data.\",\n      hintSide: 'left'\n    }, {\n      text: \"Business User: Break it down by region.\",\n      from: 'user'\n    }, {\n      text: \"NovaTalk: North: $120K, East: $95K, South: $110K, West: $80K. Highest satisfaction: North.\",\n      from: 'bot',\n      hint: \"Regional split of revenue + satisfaction; North leads on both metrics.\",\n      hintSide: 'right'\n    }, {\n      text: \"Business User: Recurring complaints?\",\n      from: 'user'\n    }, {\n      text: \"NovaTalk: Delayed deliveries and packaging. Suggested actions: optimize shipping and improve packaging.\",\n      from: 'bot',\n      hint: \"Top issues identified with recommended remediation steps.\",\n      hintSide: 'left'\n    }, {\n      text: \"Business User: Export it.\",\n      from: 'user'\n    }, {\n      text: \"NovaTalk: PDF and Excel sent to your inbox. Include summary chart?\",\n      from: 'bot',\n      hint: \"Exports created; can append a chart for quick sharing.\",\n      hintSide: 'right'\n    }, {\n      text: \"Business User: Yes.\",\n      from: 'user'\n    }, {\n      text: \"NovaTalk: Done. Chart included. Anything else to analyze?\",\n      from: 'bot',\n      hint: \"Report finalized with chart; ready for follow-up analysis.\",\n      hintSide: 'left'\n    }];\n    // Input / typing state (NEW)\n    this.draft = '';\n    this.isTyping = false;\n    // Auto-play controller (pause when user interacts)\n    this.autoplayOn = true;\n    this.autoplayIdx = 0;\n    // Outside hint bubble (ONE at a time)\n    this.outsideHints = [];\n    this.logos = ['/assets/logo1.png', '/assets/logo2.png', '/assets/logo3.png', '/assets/logo4.jpg', '/assets/logo5.png', '/assets/logo.6.png'];\n    this.featureCards = [{\n      id: 'real-time-moderation-compliance-enforcement',\n      img: '/assets/features/real-time-moderation-compliance-enforcement.jpeg',\n      title: 'Real-Time Moderation & Compliance Enforcement',\n      desc: 'Monitors chats, forums, and interactions for harmful or non-compliant content. Instantly flags risks, enforces rules, and keeps engagement safe while protecting brand reputation.'\n    }, {\n      id: 'ai-powered-business-knowledge-hub',\n      img: '/assets/features/ai-powered-business-knowledge-hub.jpeg',\n      title: 'AI-Powered Business Knowledge Hub',\n      desc: 'Acts as a central brain for your organization. Answers questions from product specs to policies with accurate, context-aware responses while tracking previous interactions.'\n    }, {\n      id: 'internal-system-integration',\n      img: '/assets/features/internal-system-integration.png',\n      title: 'Internal System Integration',\n      desc: 'Connects with CRMs, ERPs, support tools, and inventory platforms. Fetches, updates, and shares critical information instantly — reducing friction and keeping operations moving.'\n    }, {\n      id: '24x7-customer-engagement',\n      img: '/assets/features/24x7-customer-engagement.jpeg',\n      title: '24/7 Customer Engagement',\n      desc: 'Always active, answering questions, resolving requests, and escalating complex issues to human agents without delays — keeping customers satisfied around the clock.'\n    }, {\n      id: 'personalized-responses-recommendations',\n      img: '/assets/features/personalized-responses-recommendations.png',\n      title: 'Personalized Responses & Recommendations',\n      desc: 'Recognizes returning customers, recalls past interactions, and delivers responses or recommendations that fit user history and preferences — creating meaningful, relationship-focused engagement.'\n    }, {\n      id: 'multilingual-support',\n      img: '/assets/features/multilingual-support.jpeg',\n      title: 'Multilingual Support',\n      desc: 'Communicates in multiple languages to serve global customers, breaking language barriers and delivering consistent, high-quality interactions without extra staff.'\n    }, {\n      id: 'omnichannel-presence',\n      img: '/assets/features/omnichannel-presence.jpeg',\n      title: 'Omnichannel Presence',\n      desc: 'Integrates across websites, mobile apps, email, social media, and messaging platforms like WhatsApp or Slack — ensuring customers engage wherever they are.'\n    }, {\n      id: 'analytics-insights-dashboard',\n      img: '/assets/features/analytics-insights-dashboard.jpeg',\n      title: 'Analytics & Insights Dashboard',\n      desc: 'Tracks conversation trends, frequent questions, satisfaction scores, and escalations. Delivers insights that help improve operations, service quality, and product offerings.'\n    }, {\n      id: 'secure-privacy-compliant',\n      img: '/assets/features/secure-privacy-compliant.png',\n      title: 'Secure & Privacy-Compliant',\n      desc: 'Uses enterprise-grade encryption and follows global data regulations, keeping sensitive business and customer information protected at all times.'\n    }];\n    this.hoveredPricing = 1;\n    this.billing = 'year';\n    this.testimonials = [{\n      stars: '★★★★★',\n      text: 'NovaTalk handles messages instantly, flags potential risks, and suggests next steps. It’s like having a team working 24/7.',\n      author: 'Ethan Navarro'\n    }, {\n      stars: '★★★★★',\n      text: 'All our systems connect seamlessly. NovaTalk pulls data in real time for accurate answers.',\n      author: 'Jasper Lin'\n    }, {\n      stars: '★★★★★',\n      text: 'Customer questions don’t pile up anymore. Multilingual, always available.',\n      author: 'Mason Caldwell'\n    }, {\n      stars: '★★★★★',\n      text: 'Every conversation provides insights. Trends and risks are flagged; decisions are faster.',\n      author: 'Alice Thornton'\n    }, {\n      stars: '★★★★★',\n      text: 'Returning interactions feel personal. Safety and compliance built in.',\n      author: 'Oliver Brant'\n    }, {\n      stars: '★★★★★',\n      text: 'Across apps and channels, updates are instant so our team focuses on priorities.',\n      author: 'Lukas Moreau'\n    }];\n    this.featPage = 0;\n    this.featurePages = [];\n    this.testPage = 0;\n    this.testPages = [];\n    this.faqsOpen = false;\n    this.botAvatar = 'assets/Novatalk.png';\n    this.userAvatar = 'assets/ellipse.svg';\n    // autoscroll helpers (DEMO CHAT)\n    this.stickToBottom = true;\n    this.onResize = () => this.layoutOutsideHintForCenter();\n    // hint dwell control\n    this.hintDwellMs = 2000;\n    this.currentHintIdx = null;\n    this.lastHintSwitchAt = 0;\n    this.heroChatMsgs = [];\n    this.heroScript = [{\n      from: 'user',\n      label: 'Ellie Andrews',\n      text: 'Hi I need your urgent assistance.'\n    }, {\n      from: 'bot',\n      label: 'Novatalk',\n      text: 'Yes, Ellie tell me what is bothering you today?'\n    }, {\n      from: 'user',\n      label: 'Ellie Andrews',\n      text: 'Please pull me the latest order data of this user - John Michael. Premium user.'\n    }, {\n      from: 'bot',\n      label: 'Novatalk',\n      text: 'Hi Ellie, John has purchased a PS5 on July 21, 2025 09:01 AM at the price of $3251.'\n    }, {\n      from: 'user',\n      label: 'Ellie Andrews',\n      text: 'Great, thanks!'\n    }];\n    this.heroIdx = 0;\n  }\n  goFeature(id) {\n    this.router.navigate(['/features'], {\n      fragment: id\n    });\n  }\n  onPriceHover(i) {\n    this.hoveredPricing = i;\n  }\n  onPriceLeave() {\n    this.hoveredPricing = 1;\n  }\n  // ===== lifecycle =====\n  ngOnInit() {\n    // seed the chat with a single friendly bot line\n    this.messages = [{\n      from: 'bot',\n      text: 'Hi! I’m Novatalk. Ask me about tickets, orders, or KPIs.'\n    }];\n    // start the auto-play loop (until user types)\n    this.startAutoplay();\n    const pageSize = 3;\n    for (let k = 0; k < this.featureCards.length; k += pageSize) {\n      this.featurePages.push(this.featureCards.slice(k, k + pageSize));\n    }\n    for (let k = 0; k < this.testimonials.length; k += pageSize) {\n      this.testPages.push(this.testimonials.slice(k, k + pageSize));\n    }\n  }\n  ngAfterViewInit() {\n    // DEMO chat init\n    const el = this.chatBody?.nativeElement;\n    if (el) {\n      this.scrollToBottom();\n      this.layoutOutsideHintForCenter();\n      el.addEventListener('scroll', () => {\n        const nearBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 40;\n        this.stickToBottom = nearBottom;\n        this.layoutOutsideHintForCenter();\n      }, {\n        passive: true\n      });\n      this.mo = new MutationObserver(() => {\n        if (this.stickToBottom) this.scrollToBottom();\n        this.layoutOutsideHintForCenter();\n      });\n      this.mo.observe(el, {\n        childList: true,\n        subtree: true\n      });\n      this.msgRows.changes.subscribe(() => setTimeout(() => this.layoutOutsideHintForCenter()));\n      window.addEventListener('resize', this.onResize, {\n        passive: true\n      });\n    }\n    // HERO chat init\n    this.playHeroChat();\n  }\n  ngOnDestroy() {\n    this.mo?.disconnect();\n    window.removeEventListener('resize', this.onResize);\n    if (this.autoplayTimer) clearTimeout(this.autoplayTimer);\n    if (this.heroTimer) {\n      clearTimeout(this.heroTimer);\n      this.heroTimer = undefined;\n    }\n  }\n  // ===== DEMO CHAT: user send + bot typing/streaming =====\n  send() {\n    const text = (this.draft || '').trim();\n    if (!text || this.isTyping) return;\n    // stop demo autoplay after user interacts\n    this.autoplayOn = false;\n    if (this.autoplayTimer) clearTimeout(this.autoplayTimer);\n    this.messages = [...this.messages, {\n      from: 'user',\n      text\n    }];\n    this.draft = '';\n    this.scrollSoon();\n    this.simulateBotReply(text);\n  }\n  simulateBotReply(userText) {\n    this.isTyping = true;\n    const answer = this.makeDemoAnswer(userText);\n    const preTypeDelay = 500 + Math.random() * 700;\n    setTimeout(() => {\n      // add a bot message we will stream into\n      const botMsg = {\n        from: 'bot',\n        text: ''\n      };\n      this.messages = [...this.messages, botMsg];\n      this.scrollSoon();\n      const chars = Array.from(answer);\n      const chunkSize = 12;\n      const tickMs = 28;\n      const timer = setInterval(() => {\n        botMsg.text += chars.splice(0, chunkSize).join('');\n        // trigger change detection: clone array reference\n        this.messages = [...this.messages];\n        this.scrollSoon();\n        if (chars.length === 0) {\n          clearInterval(timer);\n          this.isTyping = false;\n          this.scrollSoon();\n        }\n      }, tickMs);\n    }, preTypeDelay);\n  }\n  makeDemoAnswer(q) {\n    const lc = q.toLowerCase();\n    if (lc.includes('ticket') || lc.includes('jira')) {\n      return 'I found 3 open Jira tickets assigned to you. The highest priority is NOVA-142 (“Header alignment on landing page”). Would you like me to summarize it or change the status to In Progress?';\n    }\n    if (lc.includes('kpi') || lc.includes('metrics')) {\n      return 'Latest KPIs (last 24h): CSAT 4.7, Avg. first response 2m 12s, Deflection rate 38%. I can break this down by channel or show a weekly trend.';\n    }\n    if (lc.includes('order') || lc.includes('status')) {\n      return 'Order #NT-78421 shipped today via BlueDart. ETA Thursday. I can send the tracking link to the customer or update the CRM timeline.';\n    }\n    return 'Here’s what I can do: pull Jira issues, summarize Confluence docs, query metrics, or action workflows (assign, comment, update statuses). Try: “Show my high-priority tickets”.';\n  }\n  // ===== DEMO CHAT helpers / outside hint logic =====\n  addMessage(m) {\n    this.messages = [...this.messages, m];\n    this.scrollSoon();\n  }\n  scrollToBottom() {\n    const el = this.chatBody?.nativeElement;\n    if (!el) return;\n    el.scrollTop = el.scrollHeight;\n  }\n  scrollSoon() {\n    setTimeout(() => {\n      if (this.stickToBottom) this.scrollToBottom();\n      this.layoutOutsideHintForCenter();\n    }, 0);\n  }\n  /** Pick the message closest to vertical center and render its hint outside. */\n  layoutOutsideHintForCenter() {\n    const wrap = this.demoWrap?.nativeElement;\n    const body = this.chatBody?.nativeElement;\n    const box = this.chatBox?.nativeElement;\n    if (!wrap || !body || !box) return;\n    const wrapRect = wrap.getBoundingClientRect();\n    const bodyRect = body.getBoundingClientRect();\n    const boxRect = box.getBoundingClientRect();\n    const centerY = bodyRect.top + bodyRect.height / 2;\n    const rows = this.msgRows?.toArray() || [];\n    if (!rows.length) {\n      this.outsideHints = [];\n      this.currentHintIdx = null;\n      return;\n    }\n    let bestIdx = -1;\n    let bestDist = Number.POSITIVE_INFINITY;\n    rows.forEach((ref, idx) => {\n      const r = ref.nativeElement.getBoundingClientRect();\n      const rowCenter = r.top + r.height / 2;\n      const dist = Math.abs(rowCenter - centerY);\n      if (dist < bestDist) {\n        bestDist = dist;\n        bestIdx = idx;\n      }\n    });\n    const nearestMsg = this.messages[bestIdx];\n    const nearestHasHint = !!nearestMsg && nearestMsg.from === 'bot' && !!nearestMsg.hint;\n    const now = Date.now();\n    let idxToRender = null;\n    if (this.currentHintIdx !== null) {\n      const currentMsg = this.messages[this.currentHintIdx];\n      const currentStillValid = !!currentMsg && currentMsg.from === 'bot' && !!currentMsg.hint && this.currentHintIdx < rows.length;\n      if (bestIdx !== this.currentHintIdx && now - this.lastHintSwitchAt >= this.hintDwellMs) {\n        if (nearestHasHint) {\n          this.currentHintIdx = bestIdx;\n          this.lastHintSwitchAt = now;\n          idxToRender = this.currentHintIdx;\n        } else if (currentStillValid) {\n          idxToRender = this.currentHintIdx;\n        } else {\n          this.currentHintIdx = null;\n          idxToRender = null;\n        }\n      } else {\n        if (currentStillValid) {\n          idxToRender = this.currentHintIdx;\n        } else if (nearestHasHint) {\n          this.currentHintIdx = bestIdx;\n          this.lastHintSwitchAt = now;\n          idxToRender = this.currentHintIdx;\n        } else {\n          idxToRender = null;\n        }\n      }\n    } else {\n      if (nearestHasHint) {\n        this.currentHintIdx = bestIdx;\n        this.lastHintSwitchAt = now;\n        idxToRender = this.currentHintIdx;\n      } else {\n        idxToRender = null;\n      }\n    }\n    if (idxToRender === null) {\n      this.outsideHints = [];\n      return;\n    }\n    const m = this.messages[idxToRender];\n    const rowRect = rows[idxToRender].nativeElement.getBoundingClientRect();\n    const top = rowRect.top - wrapRect.top + 4;\n    const bubbleW = 260;\n    const gutter = 8;\n    const leftX = boxRect.left - wrapRect.left - bubbleW - gutter;\n    const rightX = boxRect.right - wrapRect.left + gutter;\n    const side = m.hintSide ?? 'left';\n    this.outsideHints = [side === 'left' ? {\n      top,\n      x: leftX,\n      side: 'left',\n      text: m.hint\n    } : {\n      top,\n      x: rightX,\n      side: 'right',\n      text: m.hint\n    }];\n  }\n  // ===== HERO CHAT autoplay =====\n  playHeroChat() {\n    this.heroChatMsgs = [];\n    this.heroIdx = 0;\n    const step = () => {\n      if (this.heroIdx < this.heroScript.length) {\n        this.heroChatMsgs = [...this.heroChatMsgs, this.heroScript[this.heroIdx++]];\n        setTimeout(() => this.scrollHeroToBottom(), 0);\n        this.heroTimer = setTimeout(step, 1100);\n      } else {\n        this.heroTimer = setTimeout(() => this.playHeroChat(), 2200);\n      }\n    };\n    step();\n  }\n  scrollHeroToBottom() {\n    const el = this.heroChatBody?.nativeElement;\n    if (!el) return;\n    el.scrollTo({\n      top: el.scrollHeight,\n      behavior: 'smooth'\n    });\n  }\n  // ===== autoplay for the demo chat (runs until user types) =====\n  startAutoplay() {\n    this.autoplayOn = true;\n    const tick = () => {\n      if (!this.autoplayOn) return;\n      const msg = this.steps[this.autoplayIdx++];\n      if (this.autoplayIdx >= this.steps.length) this.autoplayIdx = 0;\n      // render scripted message\n      this.addMessage(msg);\n      // keep list short\n      if (this.messages.length > 8) this.messages.shift();\n      this.autoplayTimer = setTimeout(tick, 1200);\n    };\n    this.autoplayTimer = setTimeout(tick, 1200);\n  }\n};\n__decorate([ViewChild('chatBody')], LandingComponent.prototype, \"chatBody\", void 0);\n__decorate([ViewChild('chatBox')], LandingComponent.prototype, \"chatBox\", void 0);\n__decorate([ViewChild('demoWrap')], LandingComponent.prototype, \"demoWrap\", void 0);\n__decorate([ViewChildren('msgRow')], LandingComponent.prototype, \"msgRows\", void 0);\n__decorate([ViewChild('heroChatBody')], LandingComponent.prototype, \"heroChatBody\", void 0);\nLandingComponent = __decorate([Component({\n  selector: 'app-landing',\n  standalone: true,\n  imports: [CommonModule, RouterModule, FormsModule, SubscribeBarComponent],\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.css']\n})], LandingComponent);\nexport { LandingComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}